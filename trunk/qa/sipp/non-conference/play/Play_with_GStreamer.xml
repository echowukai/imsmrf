<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- In this flow after starting normal session, client sends an INFO method containing 
      request to play some file. The value of request is read from the csv file.Shell script
      gst-receiver-start.sh starts receiving media. After the response is generated, Shell script 
      gst-receiver-stop.sh stops receiving the media.The duration and playoffset values from response
      are verified against expected values using shell scripts Calc_and_Generate_Results_for_Duration.sh  
      and Calc_and_Generate_Results_for_Playoffset.sh and written to results.txt file
-->

<!-- FLOW -->
<!--INVITE =======>     -->
<!--200   <========	-->
<!--ACK   ========>	-->
<!--INFO  ========>	-->
<!--200   <========	-->
<!--INFO  <========	-->
<!--200   ========>	-->
<!--BYE   ========>	-->
<!--200   <========	-->

<scenario name="Play">
	<nop display="Play"/>
	<!-- Client Sending INVITE -->
<send retrans="500">
    <![CDATA[INVITE sip:ms@mediaserver.com:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[call_number]
      To: sut <sip:ms@mediaserver.com:mediaserver.com>
      Call-ID: [call_id]
      CSeq: 1 INVITE
      Contact: sip:sipp@[local_ip]:[local_port]
      Max-Forwards: 70
      Subject: Performance Test
      Content-Type: application/sdp
      Content-Length: [len]

v=0
o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
s=-
c=IN IP[media_ip_type] [media_ip]
t=0 0
m=audio [media_port-10] RTP/AVP 0
a=rtpmap:0 PCMU/8000
]]>
  </send>

  <nop>
	  <action>
		  
		  <assignstr assign_to="filename" value="testing[call_id].wav" />
		  <log message="filename  is [$filename]"/> 
		  
		  <assignstr assign_to="portvalue" value="[media_port-10]" />
		  <log message="port value  is [$portvalue]"/>
		  
		  <!-- Start receiving media stream -->
		  <exec command="./gst-receiver-start.sh [$portvalue] [$filename]"/>
		  
		  <!-- Pause Current SIPP Instance -->
		  <exec int_cmd="pause_call" />
	  </action>
</nop>
  <recv response="100" optional="true">
  </recv>
  <!--Response receiving -->
  <recv response="200" >
  <action>
 
     <exec command="echo -e   ================================================================================================================================= >> results.txt"/>
  </action>
  </recv>






  <!--######################-->
  <!-- Sending Ack -->
  <send>
    <![CDATA[
      ACK sip:ms@mediaserver.com:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[call_number]
      To: sut <sip:ms@mediaserver.com:mediaserver.com>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: 1 ACK
      Contact: sip:sipp@[local_ip]:[local_port]
      Max-Forwards: 70
      Subject: Performance Test
      Content-Length: 0
      ]]>
  </send>
  
  <pause milliseconds="5000"/>


<nop>
          <action>
            <assignstr assign_to="promptvalue" value="[field5]" />
            <log message="prompt value  is [$promptvalue]"/> 
	    <assignstr assign_to="basevalue" value="[field0]" />
            <log message="base value  is [$basevalue]"/> 
	    
	    <assignstr assign_to="audiovalue" value="[field1]" />
	    <log message="audio value  is [$audiovalue]"/> 


	    <assignstr assign_to="testvariables" value="[field5]" />
	    <log message="testname  is [$testvariables]"/> 

	    <exec command="echo -e Test Variables       :[$testvariables] Call_ID             :[call_id]>> results.txt"/>
            
          </action>
</nop>

<pause milliseconds="1000"/>


<nop>
<action>
<exec command="echo -e ================================================================================================================================= >> results.txt"/>
</action>
</nop>

<!-- INFO method containing MSCML -->
<send retrans="500">
    <![CDATA[
INFO sip:ms@mediaserver.com:[remote_port] SIP/2.0
Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[pid]SIPpTag00[call_number]
To: sut <sip:ms@mediaserver.com:mediaserver.com>
Call-ID: [call_id]
CSeq: 1 INFO
Contact: sip:sipp@[local_ip]:[local_port]
Max-Forwards: 70
Subject: Performance Test
Content-Type: application/mediaservercontrol+xml
Content-Length: [len]

<?xml version="1.0" encoding="UTF-8" ?>
<MediaServerControl version="1.0">
      <request>
      	<play id="2">
	<prompt [$basevalue] [$promptvalue]  >
	[$audiovalue]      	
      	</prompt>
      	</play>
      </request>
</MediaServerControl>]]>
</send>


  <!-- 200 ok for INFO method     -->
<recv response="200">
</recv>
  

<!-- Receiving Info request containing response of MSCML -->
<recv request="INFO">
	  <action>
		  <!-- Regular Expression for checking Request attribute:::variable 8 contains request attribute value -->
		  <ereg regexp="request=\"([A-Z,a-z]*)\"" search_in="msg" check_it="true" assign_to="8"/>
		  <log message="[$8]"/>
		  <!-- Regular Expression for checking Text attribute:::variable 9 contains text attribute value -->
		  <!--ereg regexp="text=\"([A-Z,a-z]*)\"" search_in="msg" check_it="true" assign_to="9"/>
		  <log message="[$9]"/-->
		  <!-- Regular Expression for checking Code attribute :::variable 1 contains code value -->
		  <ereg regexp="code=\"([2,4,5])([0-9]{2})\"" search_in="msg" check_it="true" assign_to="1,2,3"/>
		  <todouble assign_to="1" variable="2" />
		  <!-- variable 3 cintains TRUE for Error on Media Server -->
		  <test assign_to="3" variable="1" compare="equal" value="5" />
		  <!-- variable 4 contains TRUE for success -->
		  <test assign_to="4" variable="1" compare="equal" value="2" />
		  <!-- variable 5 contains TRUE for client error -->
		  <test assign_to="5" variable="1" compare="equal" value="4" />
		  <!-- Regular Expression for checking Play Duration:::variable 6 contains playduration value -->
		  <!--ereg regexp="playduration=\"([0-9]*)\"" search_in="msg" check_it="true" assign_to="6,7"/-->
		  <ereg regexp="playduration=\"([0-9]*)([a-z]*)\"" search_in="msg" check_it="true" assign_to="6,7,51"/>
		  <!-- Test if the playduration is specified in seconds -->
		  <strcmp assign_to="tests" variable="51" value="s" />
		  <test assign_to="strue" variable="tests" compare="equal" value="0" />
                  <log message="duration from response is [$7]"/>
                  <assignstr assign_to="durationresponse" value="[$7]" />
		  <log message="durationresponse is [$durationresponse]"/>
		  		  
   		  <todouble assign_to="7" variable="7" />
                  <log message="duration from response is [$7] after todouble"/>
		  <test assign_to="dtrue" variable="7" compare="equal" value="0" />
		  <log message="dtrue is [$dtrue]"/>
		  <!-- Regular Expression for checking Playoffset:::variable 10 contains playoffset value -->
		  <ereg regexp="playoffset=\"([0-9]*)\"" search_in="msg" check_it="true" assign_to="10,52"/>
 		  <assignstr assign_to="filedur" value="[field2]" />
		  <assignstr assign_to="fileduration" value="[field6]" />
    	          <!-- Converts the string value in $20 to a double-precision value stored in $21. -->
    	          <todouble assign_to="filedur1" variable="filedur" />
                  <log message="[$filedur1]"/>
                  <log message="[$strue]"/>
		  <assignstr assign_to="70" value="[field4]" />
	 </action>
</recv>
 





 <!-- Sending 200 ok for INFO received containing MSCML response -->
  <!-- after this it will test variable 3 and jump to Label for error on media server    -->
<send next="1" test="3">
   <![CDATA[
      SIP/2.0 200 OK
      [last_Via:]
      [last_From:]
      [last_To:];tag=[pid]SIPpTag01[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Type: application/mscml
      Content-Length: [len]
      ]]>
</send>





<!-- Pause for media transfer to complete -->

<!--pause milliseconds="10"/-->
<nop>
	<action>
		<!-- Stop receiving the media stream -->
		<exec command="./gst-receiver-stop.sh"/>
		
	</action>
</nop>



<nop next="21" test="dtrue">
</nop>

<nop next="22">
</nop>

<label id="21"/>
<nop>
	<action>
		<assignstr assign_to="7" value="0" />
		<!--todouble assign_to="7" variable="7" /-->	
		<log message="after conversion 7 is [$7]"/>
	</action>
</nop>


<label id="22"/>


<label id="23"/>
<!-- **************************************************************************************************************** -->

  <!--checks variable 5 and jump to client error case-->
  <nop next="2" test="5">
</nop>
<!--checks variable 4 and jump to code for success case-->
  <nop next="3" test="4">
</nop>
<!-- For Invalid code-->
<nop next="61">
	<action>
        <exec command="echo Status              :FAIL >> results.txt"/>
        <exec command="echo Reason              :All three variables are false!!!!!!!! PROBLEM >> results.txt"/>
	</action>
</nop>
<!--  Error on Media Server     -->
  <label id="1"/>
  <nop next="61" >
	  <action>
             <exec command="echo Status              :FAIL >> results.txt"/>
             <exec command="echo Reason              :Error on Media Server!!! >> results.txt"/>		  
          </action>
</nop>

<!-- Error on client side -->
<label id="2"/>
<nop next="61">
	<action> 
               <exec command="echo Status              :FAIL >> results.txt"/>
               <exec command="echo Reason              :Client Error!!! >> results.txt"/>	
	</action>
</nop>

<!-- success according to code -->

<label id="3"/>
<nop next="8" test="strue">
</nop>

<nop next="9">
	<action>
		<log message="Moving to the success case without converting the time value"/>
	</action>
</nop>

<label id="8"/>
<nop next="9">
	<action>
		<multiply assign_to="7" value="1000" />	
	<log message="Moving to the success case after conversion of the time value [$7]"/>

	</action>
</nop>

<label id="9"/>
<nop>
	<action>
		<!--upper limit of duration(z=x+100) where x is the  duration in play request-->
		
		<!-- Storing value of duration from csv file -->
		<assignstr assign_to="20" value="[field3]" />
    	        <!-- Converts the string value in $20 to a double-precision value stored in $21. -->
    	        <todouble assign_to="21" variable="20" />
		<todouble assign_to="22" variable="20" />
		<!-- Calculates upperbound of duration. -->
		<add assign_to="21" value="100" />
		<assignstr assign_to="upper" value="[$21]" />
		<!-- Calculates difference b/w duration and its upperbound -->		
		<subtract assign_to="21" variable="7" />
		<!-- Campares the difference with 100 -->
		<test assign_to="6" variable="21" compare="greater_than_equal" value="0" />
		<assignstr assign_to="13" value="PASS" />
		<assignstr assign_to="14" value="FAIL" />
	</action>
</nop>

<!-- moves to label 4 if variable 6 sets -->
<nop next="4" test="6">
	<action>
		<!--lower limit of duration(y=x-100) where x is the duration in play request-->
		<!-- Calculates lowerbound of duration -->
		<subtract assign_to="22" value="100" />
		<assignstr assign_to="lower" value="[$22]" />
		<!-- Assigns value of duration -->
		<todouble assign_to="23" variable="7" />
		<!-- Calculates difference b/w duration and its lowerbound -->	
		<subtract assign_to="23" variable="22" />
		<!-- Campares the difference with 100 -->		
		<test assign_to="11" variable="23" compare="greater_than_equal" value="0" />
	</action>
</nop>

<!--if playduration doesn't match-->
<nop next="6">
	<action>
		<log message="Test is [$14] because play duration is more than limit"/>
		<assignstr assign_to="15" value="FAIL" />
	</action>
</nop>

<!-- if duration matches the criteria-->
<label id="4"/>
<nop next="7" test="11">
</nop>

<nop next="6">
	<action>
		<log message="Test is [$14] because play duration is less than limit"/>
		<assignstr assign_to="15" value="FAIL" />
		
	</action>
</nop>

<label id="7"/>
<nop next="6">
	<action>
        <log message="Inside the success case"/>
		<log message="[$10]"/>
		<log message="[$7]"/>
	    <log message="Test is [$13] according to duration in MSCML response"/>
	    <assignstr assign_to="15" value="PASS" />
	</action>
</nop>




<label id="6"/>


<nop>
  <action>
        <exec command="./Calc_and_Generate_Results_for_Duration.sh  [$durationresponse] [$15] [$upper] [$lower] [$filedur] [$filename]"/>
	<exec int_cmd="pause_call" />
	<exec command="./Calc_and_Generate_Results_for_Playoffset.sh [$70] [$52] [$fileduration]"/>
	<exec int_cmd="pause_call" />
  </action>
</nop>

<label id="61"/>
<!-- SENDING BYE -->

<send>
    <![CDATA[
      BYE sip:ms@mediaserver.com:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[call_number]
      To: sut <sip:ms@mediaserver.com:[remote_port]>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: 2 BYE
      Contact: sip:sipp@[local_ip]:[local_port]
      Max-Forwards: 70
      Subject: Performance Test
      Content-Length: 0
    ]]>
</send>
  <!-- receiving 200 ok -->
<recv response="200">
</recv>

<pause milliseconds="10">
  <!-- definition of the response time repartition table (unit is ms)   -->
  <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>

  <!-- definition of the call length repartition table (unit is ms)     -->
  <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>
 <!--CallLengthRepartition value="1000, 5000, 10000, 50000, 100000, 500000, 1000000"/-->

 


</scenario>
