<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- In this flow after starting normal sesssion, client sends an INFO	-->
<!-- method containing request to play some file. Client gives the	-->
<!--duration of file to be played. When server fulfills this request	-->
<!--it send back response of play request. In the response it contains	-->
<!--an attribute of play duration. This test case will check either the	-->
<!--duration returned from the media server is in given range or not	-->
<!--means it should be in duration-50 and duration+50. And depending on	-->
<!--this it will pass or fail the test!!!!				-->

<!--ASSUMPTIONS:-->
<!--  1) It is assumed that files num_invalid.wav and please_check.wav must be present at media servers--> 
<!-- 2) It is assumed that final duration should be 5000 after INFINITE repeatitions-->
<!-- 3)Duration is checked between upper limit (z=x+50) and lower limit (z=x-50) where x is the duration given in play request-->
<!-- 4) It is assumed that all time values are in milliseconds-->


<!-- FLOW NUMBER 1 for checking duration-->
<!--INVITE =======>     -->
<!--200   <========	-->
<!--ACK   ========>	-->
<!--INFO  ========>	-->
<!--200   <========	-->
<!--INFO  <========	-->
<!--200   ========>	-->
<!--BYE   ========>	-->
<!--200   <========	-->

<scenario name="duration UAC">
	<nop display="Duration Check"/>
	<!-- Client Sending INVITE -->
<send retrans="500">
    <![CDATA[

      INVITE sip:[service]@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[call_number]
      To: sut <sip:[service]@[remote_ip]:[remote_port]>
      Call-ID: [call_id]
      CSeq: 1 INVITE
      Contact: sip:sipp@[local_ip]:[local_port]
      Max-Forwards: 70
      Subject: Performance Test
      Content-Type: application/sdp
      Content-Length: [len]
      
      v=0
      o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
      s=-
      c=IN IP[media_ip_type] [media_ip]
      t=0 0
      m=audio 5000 RTP/AVP 0
      a=rtpmap:0 PCMU/8000

    ]]>
  </send>
  <!--Response receiving -->
  <recv response="200" >
  </recv>
  <!--######################-->
  <!-- Sending Ack -->
  <send>
    <![CDATA[
      ACK sip:[service]@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[call_number]
      To: sut <sip:[service]@[remote_ip]:[remote_port]>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: 1 ACK
      Contact: sip:sipp@[local_ip]:[local_port]
      Max-Forwards: 70
      Subject: Performance Test
      Content-Length: 0
      ]]>
  </send>







  <!-- INFO method containing MSCML -->
  <send retrans="500">
    <![CDATA[

      INFO sip:[service]@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[pid]SIPpTag00[call_number]
      To: sut <sip:[service]@192.168.0.111>
      Call-ID: [call_id]
      CSeq: 1 INFO
      Contact: sip:sipp@[local_ip]:[local_port]
      Max-Forwards: 70
      Subject: Performance Test
      Content-Type: application/MSCML
      Content-Length: [len]
      <?xml version="1.0" encoding="UTF-8" ?>

      <MediaServerControl version="1.0">
      <request>
      <play id="3">
      <prompt duration="50000" repeat="[field3]" delay="[field4]">
      <audio url="[field0]"/>
      </prompt>
      </play>
      </request>
      </MediaServerControl>

    ]]>
  </send>

<nop>
<action>
		<!-- Reading value of playduration from csv file -->
		<assignstr assign_to="dur" value="[field2]" />
    		<!-- Converts the string value in $due to a double-precision value stored in $21. -->
    		<todouble assign_to="dur1" variable="dur" />
		
		<!-- Starting to receive media stream via GStreamer via gst-receiver shell script -->
		<!-- The first argument to the script is the playduration to induce a calculated amount of sleep before process completion -->
		<!-- The second argument is the port to receive the media file -->          	
		<exec command="./gst-receiver.sh [$dur1] 5000"/>
		<!-- Adding the allowed offset to the playduration. -->
		<!-- This variable is later used to pause the client side for synchronization with the GStreamer process -->		
		<add assign_to="dur1" value="50" />
      </action>
</nop>


  <!-- 200 ok for INFO method     -->
  <recv response="200">
  </recv>


  <!-- Receiving Info request containing response of MSCML -->
  <recv request="INFO">
	  <action>
		  <!-- Regular Expression for checking Request attribute:::variable 8 contains request attribute value -->
		  <ereg regexp="request=\"([A-Z,a-z]*)\"" search_in="msg" check_it="true" assign_to="8"/>
		  <log message="[$8]"/>
		  <!-- Regular Expression for checking Text attribute:::variable 9 contains text attribute value -->
		  <ereg regexp="text=\"([A-Z,a-z]*)\"" search_in="msg" check_it="true" assign_to="9"/>
		  <log message="[$9]"/>
		  <!-- Regular Expression for checking Code attribute :::variable 1 contains code value -->
		  <ereg regexp="code=\"([2,4,5])([0-9]{2})\"" search_in="msg" check_it="true" assign_to="1,2,3"/>
		  <todouble assign_to="1" variable="2" />
		  <!-- variable 3 cintains TRUE for Error on Media Server -->
		  <test assign_to="3" variable="1" compare="equal" value="5" />
		  <!-- variable 4 contains TRUE for success -->
		  <test assign_to="4" variable="1" compare="equal" value="2" />
		  <!-- variable 5 contains TRUE for client error -->
		  <test assign_to="5" variable="1" compare="equal" value="4" />
		  <!-- Regular Expression for checking Play Duration:::variable 6 contains playduration value -->
		  <!--ereg regexp="playduration=\"([0-9]*)\"" search_in="msg" check_it="true" assign_to="6,7"/-->
		<ereg regexp="playduration=\"([0-9]*)([a-z]*)\"" search_in="msg" check_it="true" assign_to="6,7,51"/>
			
		<!-- Test if the playduration is specified in seconds -->
		<strcmp assign_to="tests" variable="51" value="s" />
		<test assign_to="strue" variable="tests" compare="equal" value="0" />

		<todouble assign_to="7" variable="7" />


		  <!-- Regular Expression for checking Playoffset:::variable 10 contains playoffset value -->
		  <ereg regexp="playoffset=\"([0-9]*)\"" search_in="msg" check_it="true" assign_to="10"/>

		<assignstr assign_to="filedur" value="[field1]" />
    		<!-- Converts the string value in $20 to a double-precision value stored in $21. -->
    		<todouble assign_to="filedur1" variable="filedur" />

	 </action>
  </recv>
  <!-- Sending 200 ok for INFO received containing MSCML response -->
  <!-- after this it will test variable 3 and jump to Label for error on media server    -->
  <send next="1" test="3">
   <![CDATA[
      SIP/2.0 200 OK
      [last_Via:]
      [last_From:]
      [last_To:];tag=[pid]SIPpTag01[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Type: application/mscml
      Content-Length: [len]
      <?xml version="1.0" encoding="UTF-8" ?>

      <MediaServerControl version="1.0">
      <response id="3" request="play" code="258" text="abc" reason="duration finished" playduration="257" playoffset="0">
      <error_info code="123" text="abc" context="asd"/>
      </response>
      </MediaServerControl>
    ]]>
  </send>


<!-- INFO method containing MSCML -->
<pause variable="dur1"/>
  <!--checks variable 5 and jump to client error case-->
  <nop next="2" test="5">
</nop>
<!--checks variable 4 and jump to code for success case-->
  <nop next="3" test="4">
</nop>
<!-- For Invalid code-->
<nop next="6">
	<action>
 
		<log message="All three variables are false!!!!!!!! PROBLEM"/>
		<exec command="echo Test Failed as All three variables are false!!!!!!!! PROBLEM >> results.txt"/>
	</action>
</nop>
<!--  Error on Media Server     -->
  <label id="1"/>
  <nop next="6" >
	  <action>
		  <log message="           Error on Media Server!!!"/>
		<exec command="echo Test Failed due to Error on Media Server!!! >> results.txt"/>
	 </action>
</nop>
<!-- Error on client side -->
<label id="2"/>
<nop next="6">
	<action>
		<log message="              Client Error!!!"/>
		<exec command="echo Test Failed due to Client Error!!! >> results.txt"/>
	</action>
</nop>
<!-- success according to code -->
<label id="3"/>

<nop next="8" test="strue">
</nop>

<nop next="9">
	<action>
		<log message="              Moving success without conversion"/>
	</action>
</nop>

<label id="8"/>

<nop next="9">
	<action>
		<multiply assign_to="7" value="1000" />	
	<log message="Moving success with conversion [$7]"/>

	</action>
</nop>



<label id="9"/>



<nop>
	<action>
		<!--upper limit of duration(z=x+50) where x is the  duration in play request-->
		
		<!-- Storing value of duration from csv file -->
		<assignstr assign_to="20" value="[field2]" />
    		<!-- Converts the string value in $20 to a double-precision value stored in $21. -->
    		<todouble assign_to="21" variable="20" />
		<todouble assign_to="22" variable="20" />
		<!-- Calculates upperbound of duration. -->
		<add assign_to="21" value="50" />
		<assignstr assign_to="upper" value="[$21]" />
		<!-- Calculates difference b/w duration and its upperbound -->		
		<subtract assign_to="21" variable="7" />
		<!-- Campares the difference with 50 -->
		<test assign_to="6" variable="21" compare="greater_than_equal" value="0" />
		<assignstr assign_to="13" value="PASS" />
		<assignstr assign_to="14" value="FAIL" />
	</action>
</nop>
<!-- moves to label 4 if variable 6 sets -->
<nop next="4" test="6">
	<action>
		<!--lower limit of duration(y=x-50) where x is the duration in play request-->
		<!-- Calculates lowerbound of duration -->
		<subtract assign_to="22" value="50" />
		<assignstr assign_to="lower" value="[$22]" />
		<!-- Assigns value of duration -->
		<todouble assign_to="23" variable="7" />
		<!-- Calculates difference b/w duration and its lowerbound -->	
		<subtract assign_to="23" variable="22" />
		<!-- Campares the difference with 50 -->		
		<test assign_to="11" variable="23" compare="greater_than_equal" value="0" />
	</action>
</nop>
<!--if playduration doesn't match-->
<nop next="6">
	<action>
		<log message="              Test is [$14] because play duration is more than limit"/>
		<assignstr assign_to="15" value="FAIL" />
		<exec command="echo Test Failed because play duration is more than limit >> results.txt"/>
	</action>
</nop>
<!-- if duration matches the criteria-->
<label id="4"/>
<nop next="7" test="11">
</nop>
<nop next="6">
	<action>
		<log message="Test is [$14] because play duration is less than limit"/>
		<assignstr assign_to="15" value="FAIL" />
		<exec command="echo Test Failed because play duration is less than limit >> results.txt"/>
	</action>
</nop>
<label id="7"/>
<nop next="6">
	<action>
<log message="Inside the success case"/>
		<log message="[$10]"/>
		<log message="[$7]"/>
	<log message="Test is [$13] according to duration in MSCML response"/>
	<assignstr assign_to="15" value="PASS" />


	 <exec command="./Calc_and_Generate_Results.sh [$7] [$15] [$upper] [$lower] [$filedur1]"/>
	</action>
</nop>

  <!-- SENDING BYE -->
<label id="6"/>
  <send>
    <![CDATA[
      BYE sip:[service]@[remote_ip]:[remote_port] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[call_number]
      To: sut <sip:[service]@[remote_ip]:[remote_port]>[peer_tag_param]
      Call-ID: [call_id]
      CSeq: 2 BYE
      Contact: sip:sipp@[local_ip]:[local_port]
      Max-Forwards: 70
      Subject: Performance Test
      Content-Length: 0
    ]]>
   </send>
  <!-- receiving 200 ok -->
  <recv response="200">
  </recv>
  <!-- definition of the response time repartition table (unit is ms)   -->
  <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>

  <!-- definition of the call length repartition table (unit is ms)     -->
  <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>

</scenario>
  
