/*! @mainpage Media Server
*
* This manual is divided in the following sections:
*
* - @subpage ConfOptions
*
* - @subpage UserGuide
*
* - @subpage DevelGuide
*
* - @subpage Faq
*
* - @subpage ChangeLog
*
*/

/*! @page ConfOptions Configure Options
*
* The \a 'configure' command is used to configure media server.
*
* Usage: ./configure [OPTION]...
*
* Following are the availble options for configuring the behaviour of media server:
*
* \b --enable-debug          Add compiler debugging options [default=no]
*
* \b --enable-media-trace    Display media traces [default=no]
*
* \b --enable-ms-assert      Define ms_assert*() macros [default=no]
*
* \b --enable-ms-trace       Define tracing [default=no]
*
* \b --enable-assert         Define system assert() macro [default=no]
*
* \b --enable-opt            Define compiler optimization level (applicable if debug disabled)[default=8]
*
* \b --enable-snmp           SNMP support [default=yes]
*
* \b --enable-mode           Mode of compilation [default=none]. Possible options are release,debug and none. This option overrides all other options.
*/

/*! @page UserGuide User's Guide
*
* @section MsConfigOptions Available Options in Media Server Configuration File
*
* The media server obtains its configuration parameters from \a config.xml file. The default installation path for this file is \a /etc/ms-{version}/config.xml. Following are the different available parameters provided by the config.xml file:
*
* @subsection msconfig Attributes of 'ms' node
*
* - \b username: The user name to be used in the request uri of all non-conference sip based messages for media server.
*
* - \b silence_threshold_db: Measured in db. The threshold level below which noise will be considered as silence.
*
* - \b jitter_buffer_ms: Measured in milliseconds. It shows the amount of time for keeping the received RTP packets in the memory queue while the mixing of data is being handled.
*
* - \b local_sdp_file: The file that contains the sdp compatible with the local system. If local sdp file is not found at the given path, then the default file to be used for this purpose will be obtained from \a $DATADIR/ms-1.0.0/local_sdp.
*
* - \b xsd_file: The file indicated by this attribute is used to verify all types of MSCML messages. This file is always obtained from the path provided by this attribute.
*
* - \b sound_dir: The path to be used for accessing sound files. If the base uri and audio uri are given in the reqeust for accessing any audio file, the complete path for accessing a particular audio file will be obtained by prepending the path provided in this attribute before the base uri and audio uri given in the reqeust.
*
* - \b maxfd: Maximum number of file descriptors that can be opened. This feature requires root privilages to be set. Set to zero to disable this option.
*
* - \b daemon: (yes/no) Run as a daemon or not.
*
*
* @subsection sipconfig Attributes of 'sip' node
*
* - \b port: The port to be used for transmission of all sip based MSCML messages.
*
* @subsection frameworkconfig Attributes of 'framework' node
*
* - \b port: The port be used by the framework.
*
* - \b tracefile_prefix: The prefix for the files containing the media server traces.
*
* - \b tracelevel: The level of media server traces to be displayed.
*
* @subsection systemconfig Attributes of 'system' node
*
* - \b local_ip: The media server IP address. This address is matched with the all the available IPs on the local system. If matched, then it is chosen, otherwise the first availble IP address is picked for use by the media server as its local IP.
*
* - \b domainname: The domain name associated with the media server IP address. Media server will only process the requests for the given domain name or corresponding IP address of the media server.
*
* @subsection snmpconfig Attributes of 'snmp' node
*
* - \b local_port: The media server port of the local system which will be used to receive requests from snmp agent.
*
* - \b remote_port: The port of the remote system for sending notifications to the snmp agent.
*
* - \b remote_ip: The IP address of the remote system for sending notifications to the snmp agent.
*
* @section MsRpm1 Getting List of Packages and Programs Required for Installation of Media Server from RPM Package
*
* To get a list of package and programs that are required for installation of Media Server from its RPM package,
* rpm command may be used with -qpR parameters along with the name of the RPM package:
*
* Usage: rpm -qpR {media_server_rpm_package_name}
*
* Example: rpm -qpR ms-0.0.0-1.i386.rpm
*
* @section MsRpm2 Checking Configuration Options for Media Server RPM
*
* To check the configuration options for the media server RPM, Following command may be used:
*
* Usage: rpm -qpi {media_server_rpm_package_name} | grep -i TAG | cut -b7-
*
* Example: rpm -qpi ms-0.0.0-1.i386.rpm | grep -i TAG | cut -b7-
*
* @section MsRpm3 Installing Media Server from Its RPM Package
*
* Following command may be used to install the media server from its RPM package:
*
* Usage: rpm -i {media_server_rpm_package}
*
* Example: rpm -i ms-0.0.0-1.i386.rpm
*
* To upgrade the existing package to a newer version, replace the -i parameter with -U parameter.
*
* The default installation path for the main media server application "ms" is /usr/bin. The configuration file config.xml, the
* audio files and other relevant configuration files may be found at the default path /etc/ms-{version}.
*
* @section MsRpm4 Installing Media Server at A Non-Standard Location from Its RPM Package
*
* Following command may be used to install the media server at a non-standard location from its RPM package:
*
* Usage: rpm -i --prefix={install_location} {media_server_rpm_package}
*
* Example: rpm -i --prefix=/tmp ms-0.0.0-1.i386.rpm
*
* @section MsDoc The Documentation of Media Server
*
* The documentation of media server is generated in two formats i.e. HTML & PDF docomentation.
* On linux systems, the default installation path for HTML documentation is /usr/share/doc/ms-{version}/index.html,
* while the PDF documentation may be found at /usr/share/doc/ms-{version}/ms-refman.pdf.
*
* @section MsStateMachineAttributes Available Options and Attributes for MSCML State Machines Request
*
* @subsection mscmlPlay Attributes of MSCML Play Request
*
*      The Media Server supports the followings tags and attributes for play
*
* - \b id: optional, no default value: Specifies a client-defined ID for purposes of matching requests and responses.
*
* - \b offset: optional, Specifies the time from the beginning of the URL specified in the prompturl 
*     attribute at which play will begin.
*
* - \b baseurl: optional, the baseurl attribute is used to specify a base URL that is prepended to 
*     any other URLs in the sequence that are not fully qualified.
*
* - \b delay: optional, The delay attribute to the prompt element specifies the time to pause between 
*     repetitions of the <prompt> sequence. 
*
* - \b duration: optional,The duration attribute to the prompt element controls the maximum amount 
*     of time that may elapse while the media server repeats the sequence. 
*
* - \b repeat: optional, The repeat attribute to the prompt element controls the number of times the 
*     media server plays the sequence in the <prompt> element.
*
* - \b stoponerror: Controls media server handling and reporting of errors encountered when 
*     retrieving remote content. 
*
* 
* @subsection mscmlPlayRecord Attributes of MSCML PlayRecord Request
*
*      The Media Server supports the followings tags and attributes for playrecord
*
* - \b id: optional, no default value: Specifies a client-defined ID for purposes of matching requests and responses.
*
* - \b offset: optional, Specifies the time from the beginning of the URL specified in the prompturl 
*     attribute at which play will begin.
*
* - \b baseurl: optional, the baseurl attribute is used to specify a base URL that is prepended to 
*     any other URLs in the sequence that are not fully qualified.
*
* - \b delay: optional, The delay attribute to the prompt element specifies the time to pause between 
*     repetitions of the <prompt> sequence. 
*
* - \b duration: optional, The duration attribute to the prompt element controls the maximum amount 
*     of time that may elapse while the media server repeats the sequence. 
*
* - \b repeat: optional, The repeat attribute to the prompt element controls the number of times the 
*     media server plays the sequence in the <prompt> element.
*
* - \b stoponerror: optional, Controls media server handling and reporting of errors encountered when 
*     retrieving remote content. 
*
*   \b Recording \bPhase:
*
* - \b recurl: required, no default value: Specifies the target URL for the recorded content.
*
* - \b duration: optional, Specifies the maximum allowable duration for the recording.
*
* - \b beep: optional, Specifies whether a beep should be played to the caller.
*
* - \b initsilence: optional, Specifies how long to wait for initial speech input before terminating
*      the recording.
*
* - \b endsilence: optional, Specifies how long the media server waits after speech has ended to stop 
*      the recording. 
*
* - \b recstopmask: optional, default value "0123456789ABCD#*": Specifies a list of individual DTMF characters that, if detected,
*      will cause the recording to be terminated.
*
*  @subsection mscmlPlayCollect Attributes of MSCML PlayCollect Request
*
*      The Media Server supports the followings tags and attributes for playcollect
*
* - \b id: optional, no default value: Specifies a client-defined ID for purposes of matching requests and responses.
*
* - \b offset: optional, Specifies the time from the beginning of the URL specified in the prompturl 
*     attribute at which play will begin.
*
* - \b baseurl: optional, the baseurl attribute is used to specify a base URL that is prepended to 
*     any other URLs in the sequence that are not fully qualified.
*
* - \b delay: optional, The delay attribute to the prompt element specifies the time to pause between 
*     repetitions of the <prompt> sequence. 
*
* - \b duration: optional, The duration attribute to the prompt element controls the maximum amount 
*     of time that may elapse while the media server repeats the sequence. 
*
* - \b repeat: optional, The repeat attribute to the prompt element controls the number of times the 
*     media server plays the sequence in the <prompt> element.
*
* - \b stoponerror: optional, Controls media server handling and reporting of errors encountered when 
*     retrieving remote content. 
*
*  \b  Collection \bPhase:
*
* - \b firstdigittimer: optional, default value "5000ms": Specifies how
*      long the media server waits for the initial DTMF input before
*      terminating the collection.
*
* - \b interdigittimer: optional, default value "2000ms": Specifies how
*       long the media server waits between DTMF inputs. 
*
* - \b extradigittimer: optional, default value "1000ms": Specifies how
*      long the media server waits for additional user input after the
*      specified number of digits has been collected.
*
* - \b interdigitcriticaltimer - optional, defaults to the value of the
*      interdigittimer attribute: Specifies how long the media server
*      waits after a grammar has been matched for a subsequent digit that
*      may cause a longer match. 
*
* @subsection mscmlStop Attribute of MSCML Stop Request
*
* - \b id: The id of the MSCML request to be stopped.
*
* @subsection mscmlConfigureConf Attributes fo MSCML Configure Conference Request
*
* - \b reservedtalkers: optional, no default value: The maximum number of talker legs allocated for the conference.
*
* - \b reserveconfmedia: optional, default value "yes": Controls allocation of resources to enable playing or recording to or from the entire conference.
*
* @subsection mscmlConfigureLeg Attribute of MSCML Configure Leg Request
*
* - \b dtmfclamp: optional, default value "yes": Remove detected DTMF digits from the input audio.
*
* - \b mixmode: optional, default value "full": Be a candidate for the full mix.  Alternatives are "mute", to disallow media
* in the mix, "parked", to disconnect the leg's media streams from the conference for IVR operations, "preferred", to give 
* this stream preferential selection in the mix (i.e., even if not loudest talker, include media, if present, from this leg in
* the mix), and "private", which enables personalized mixes.
*
* In addition to these attributes, the support child attribute includes:
*
* - \b configure_team: Used to create and manipulate groups for personalized mixes. It contains an attribute with the name of
* action which tells what action is to be performed for the team. The configure_team attribute also contains one or more instances
* of teammate attribute  which has an attribute of id specifying the id of the teammate.
*
*/

/*! @page DevelGuide Developer's Guide
*
* @section DevelMsQ1 Q: How to compile and install media server from its source?
*
* Ans: Following steps are required to be accomplished for compiling and installing the media server
* from its source.
*
* 1) Install the pre-requisited of media server.
* For more information about media server pre-requisites, see @ref FaqMsPreReqQ1 in @ref Faq.
*
* 2) Execute the script autogen.sh to generate makefiles from autotools.
* In linux, if the script is in your current working directory, following command may be used
* for executing the script:
*
* \a $./autogen.sh --prefix=/usr --datarootdir=/etc
*
* For debugging with gdb, following command may be used:
*
* \a $./autogen.sh --prefix=/usr --datarootdir=/etc --enable-debug=yes --enable-snmp=yes --enable-ms-trace=yes --enable-media-trace=yes
*
* For release compilation, following command may be used:
*
* \a $./autogen.sh --prefix=/usr --datarootdir=/etc --enable-debug=no --enable-opt=8 --enable-snmp=yes --enable-ms-trace=yes --enable-media-trace=yes
*
* 3) If you want to change the configuration options for media server, you can give those options,
* while executing the autogen.sh script in step 2 above or use the configure command at this moment.
* For more information about the available configuration options for media server, see @ref ConfOptions.
*
* 4) Compile the media server by using the command:
*
* \a $make
*
* 5) Install the compiled media server by using the command:
*
* \a $make \a install
*
* The name of application installed for executing the media server is 'ms'.
* In linux the default path for its installation is /usr/local/bin.
*
* The configuration file \a config.xml is used to provide the configuration options for running the media 
* server application.The default path for installation of this configuration file is /etc/ms-{version}.
* For information about the available options in the configuration file, see @ref MsConfigOptions in @ref UserGuide.
*
* @section DevelMsQ2 Q: How to make a source distribution of media server?
*
* Ans: Execute the script make_distribution.sh for making a source distribution of media server.
*
* Usage: make_distribution.sh version release [svn_tag] [configure_options]
*
* Example: ./make_distribution.sh 0.0.0 1 RELEASE_0_0_0 "--enable-opt=8 --enable-ms-trace --enable-debug=no"
*
* This script will generate the makefiles from autotools and configure the media server with the given configuration options.
* After that it will make a distribution of the source code by compiling the media server with the relevant options. This
* distribution will be generated in the form of a tar.gz file. At the end, the RPMs for installing media server will be
* created by this script. 
*
* @note This script must be run with root privilages.
*
* @section DevelMsQ3 Q: How to make an RPM distribution of media server?
*
* Ans: The RPMs of media server are generated through its source distribution. For more information about source distribution,
* see @ref DevelMsQ2.
*
* Three kinds of RPMs are generated througn the source distribution:
*
* 1) The main media server RPM installation package with the name ms-{version}-{release}.i386.rpm.
*
* 2) The media server RPM installation package with debugging information with the name ms-debuginfo-{version}-{release}.i386.rpm.
*
* 3) The media server source RPM installation package with the name ms-{version}-{release}.src.rpm.
*
* On linux systems, The default path for generation of main RPM and debugging RPM of media server is /tmp/rpm/RPMS while the path
* for the source RPM is /tmp/rpm/SRPMS.
*
* @section DevelMsQ4 Q: How is the version number given for media server?
*
* Ans: The version number for media server consists of three numbers separated by dots between them e.g. 0.0.0. Here the leftmost
* number indicates the major version, the middle number indicates the minor version, while the rightmost number indicates the
* micro version of the product.
*
* The major version is incremented when a major enahancement is done in the media server. When the major version is incremented,
* the minor version and the micro version are set to zero.
*
* The minor version is incremented when a minor enhancement is donce in the media server. When the minor version is incremented,
* the micro version are set to zero.
*
* The micro version is incremented when a bug is fixed.
*
* @section DevelMsQ5 Q: What is the directory structure of media server?
*
* Ans: The media server source code has been distributed in different folder. Each folder contains specific types of files having
* a specific & similar purpose. Following is a brief description of the media server directory structure:
*
* - \b conf: This folder contains the configuration files required by the media server.
*
* - \b doc: This folder will be created by the gen_doxygen.sh script and will contain the generated documentation of media server.
*
* - \b images: This folder contains the images which are required to be included in the documentation of media server.
*
* - \b include: This folder contains the header files which are required as an interface to different modules of media server.
*
* - \b sound: This folder contains the sample audio files which are distributed with the distribution of media server.
*
* - \b src: This folder contains the source code of the different modules of media server and the Makefiles for compiling the
* code to generate different libraries and executables for further use by other modules and test applications. There is a separate
* folder for the implemented source code for each module in this directory. Following is a brief description of these folders:
*	- \b call_leg: Contains the source code for call leg module.
*	- \b codec: Contains the source code of external codecs supported by the media server.
*	- \b dreg: Contains the source code for digit regular expression module.
*	- \b librtp: Contains the source code for rtp library.
*	- \b media: Contains the source code of media api and the available media components
*	- \b ms: Contains the source code for the additional functionality required by the media server.
*	- \b ms_app: Contains the source code for the main executable of media server.
*	- \b mscml_encoder: Contains the source code for encoding and decoding MSCML messages.j
*	- \b mscml_sm: Contains the source code for mscml state machines. The support state machines include play, playcollect and playrecord.
*	- \b sdp_oam: Contains the source code for SDP offer answer module.
*	- \b snmp: Contains the source code for communication with the snmp agent.
*	- \b snmp_parser: Contains the source code for parsing messages related to communciation with snmp agent.
*	- \b util: Contains the source code for extra utility functions required by the media server.
*
* - \b test: This folder contains the test applications to provide a know how and sample code for using different modules of the
* media server.
*
* - \b tmp: This folder contains some additional scripts that may be useful.
*
* In addition to these folder, the main sourcecode folder also contains some files which are required for the compilation of 
* media server and to generate its documentation.
*
* @section DevelMsDocQ1 Q: How to generate the documentation of media server from its source code?
*
* Ans: Execute the script gen_doxygen.sh to generate the documentation of media server. On linux system, the following command
* may be used to execute the script:
*
* ./gen_doxygen.sh
*
* The documentation will be generated in two formats i.e. HTML & PDF documentations. This script will create a folder having the
* name "doc" in the current folder. It will further contain two folder with the names "html" and "latex". The HTML documentation
* will be generated in the html folder. On the other hand, latex source code for compiling the documentation to PDF format will be
* generated in the latex folder.
*
* At the end, the script gen_doxygen.sh will compile that latex source code to generate the PDF documentation. The PDF documentation,
* so generated, will be copied to the current folder. To access the HTML documentation, open the file doc/html/index.html in a web
* browser, Similarly to see the PDF documentation, open the file ms-refman.pdf.
*
* @section DevelMacroQ1 Q: How to use the trace macro?
*
* Ans: There are two kinds of macros for traces i.e. media server traces and the media traces. To enable media server traces,
* use --enable-ms-trace option while configuring media server. Similarly, to enable the media traces, use --enable-media-trace option.
* For more information about other available options for configuration, see @ref ConfOptions.
*
* @section DevelMacroQ2 Q: How to use the ms_assert and ms_assert_return macros?
*
* Ans: The ms_assert and ms_assert_returh macros are used to check the pre-conditions and post-conditions of different functions.
* To enable these macros, use --enable-debug option while configuring media server. When the condition to be checked is not fulfilled,
* the remaining code for that function is skipped and the actions provided as post-condition are executed. The ms_assert_return macro also
* changes the return code to the given return code, if the condition to be checked is not fullfilled. For more information about other
* available options for configuration, see @ref ConfOptions.
*
* @section DevelMediaQ1 Q: How to add a new media component?
*
* Ans: 1) Add an enumerator for the new media component alongwith a new index for it in @ref e_MediaCompType in the file media.h before @ref MCT_CHAIN and @ref MCT_MAX members. Assign the current index of @ref MCT_CHAIN to the newly created enumerator and then increment the indices values of @ref MCT_CHAIN and @ref MCT_MAX.
*
* 2) Create a new module directory by the name of \b 'src/media/<comp-name>'. Choose the component name as \b <comp-name>.
*
* 3) Create a header file by the name of \b 'src/media/<comp-name>/<comp-name>_priv.h'. This file should contain a define for the magic number having a 32 bit random value. The file will also contain a structure with the name t_<comp-name>. The first two elements of this structue should be objects of structures t_MediaComp and t_MediaCompAppData. After that, there will be an integer variable for the magic number. At the end, add all the extra members required by the newly created module.
*
* 4) Create a header file by the name of \b 'include/media/<comp-name>\b.h'. It will contain a configuration structure for the initialization of the newly created media component. It will contain the prototypes for all the required  interface and callback funcions to be called by the media module.
*
* 5) Create a C file by the name of \b 'src/media/<comp-name>/<comp-name>_cb.c'. This file should contain the implementation of all the callback functions created for this new media component.
*
* 6) Create another C file by the name of \b 'src/media/<comp-name>/<comp-name>_api.c'. This file should contain the implementation of all the other functions for initializing, using and destroying the newly created media.
*
* 7) Initialize the members of the structure t_MediaCompApi with function pointers of the interface functions of the media component. Add this structure initialization at the end of the array at a new index in @ref ppfn_CompApi.
*
* 8) Also include the header file \b include/media/<media-comp>\b.h in the file media_cb.c.
*
* 9) If the media component was newly created for which no index was initialized in the array @ref ppfn_CompApi in the file media_cb.c, then add its initialization at the end as a new index in @ref ppfn_CompApi.
*
* 10) Also include the header file \b include/media/<media-comp>\b.h in the file media_cb.c, if it was not previously included.
*
* 11) To get a know-how about the prototypes for the functions of creating, using and destroying a media component, see @ref DevelMediaQ3
*
* 12) Create a file \b src/media/<comp-name>/Makefile\b.am for compiling the library for the newly created media component.
*
* 13) Also add the <comp-name> directory in the SUBDIRS list in the file \b src/media/Makefile.am for linking the library of the newly created media component with that of media API. Also add a reference to the header file \b include/media/<media-comp>\b.h in h_sources list and library of the newly created media component in libmedia_la_LIBADD list in the file \b src/media/Makefile.am.
*
* An alternate way may be to copy the folder \b src/media/null as \b src/media/<comp-name> and the header file include/media/null.h as \b include/media/<comp-name>\b.h. Similarly replace the word null by the <comp-name> in the name of all the copied files and in the data being used in those files accordingly. For this purpose copy_media_comp.sh script may be used which is availble in the 'tmp' folder. This script
* requires 2 two arguments. The first one is the name of the source component which is to be copied, while the second argument is the name
* of the new component to be created.
*
* @section DevelMediaQ2 Q: How to add a new get/set parameter for a media component?
*
* Ans: 1) Add an enumerator for the new parameter of the media component alongwith a new index for it in @ref e_MediaCompConfig in the file media.h. 10 indices are reserved for the attributes of each component. If the new attribute is for an existing component, the index of the new attribute should be 1 greater than the index of the last attribute for that media component. Otherwise add the new attribute at the end of the list with index of 10 plus the index of the first attribute of the last media component.
*
* 2) Add a new case for the newly developed parameter in the switch statement of the get parameter and set parameter functions of the respective module. The functions for get and set parameters will have a prototype similar to the one for @ref f_MediaCompGetParam and @ref f_MediaCompSetParam functions respectively.
*
* 3) If the function for getting/setting the new parameter does not exist, then follow the steps for creating a new function for that purpose as explained in @ref DevelMediaQ4
*
* 4) Initialize the corresponding members of the structure t_MediaCompApi at the corresponding index in the array @ref ppfn_CompApi in the file media_cb.c.
*
* 5) The last argument \a pvConfigData_i is used for getting or setting the value of a parameter.
*
* 6) Typecast the data in the last argument \a pvConfigData_i to an appropriate type (e.g. int, char etc. ) as it is passed as pointer to void type.
*
* @section DevelMediaQ3 Q: What functions should be implemented in a media component?
*
* Ans: Following functions are to be implemented for this purpose:
*
* 1) The function for initialising the module should have a prototype like the one for @ref f_MediaCompeInit.
*
* 2) The function for setting application data in the module should have a prototype like the one for @ref f_MediaCompSetAppData.
*
* 3) The function for destroying the module should have a prototype like the one for @ref f_MediaCompDestroy.
*
* 4) The function for setting the status of the module should have a prototype like the one for @ref f_MediaCompSetStatus.
*
* 5) The function for application data for the module should have a prototype like the one for @ref f_AppDataCb.
*
* 6) The function for application signals in the module should have a prototype like the one for @ref f_AppSignalCb.
*
* 7) The function for setting the parameters of the module should have a prototype like the one for @ref f_MediaCompSetParam.
*
* 8) The function for getting the parameters of the module should have a prototype like the one for @ref f_MediaCompGetParam.
*
* @section DevelMediaQ4 Q: How to add a new function for a get/set parameter of a media component?
*
* Ans: 1) Add a prototype for the new function in the file \b include/media/<media-comp>\b.h. The functions for get and set parameters will have a prototype similar to the one for @ref f_MediaCompGetParam and @ref f_MediaCompSetParam functions respectively.
*
* 2) Add the implementation for the function in the file \b src/media/<media-comp>/<media-comp>_api.c.
*
* 3) Initialize the corresponding members of the structure t_MediaCompApi at the corresponding index in the array @ref ppfn_CompApi in the file media_cb.c.
*
* @section DevelSnmpQ1 Q: How to add a new performance counter?
*
* Ans: 1) Add an enumerator for the new performance counter alongwith a new index for it in @ref e_PerformanceCtrs in the file snmp_defines.h.
*
* 2) Add an else if statement for checking the new performance counter before the last else block in the function @ref SNMP_GetPerformanceCtrIndx in the file snmp_comm_priv.c.
*
* 3) In the function where you want to increment this new performance counter, add a call to the @ref SNMP_IncrementPerformanceCtr macro.
*
* @section DevelSnmpQ2 Q: How to add a new fault counter?
*
* Ans: 1) Add an enumerator for the new fault counter alongwith a new index for it in @ref e_FaultCtrs in the file snmp_defines.h.
*
* 2) Add an else if statement for checking the new fault counter before the last else block in the function @ref SNMP_GetFaultCtrIndx in the file snmp_comm_priv.c.
*
* 3) In the function where you want to check the occurence of this new fault, add a call to the @ref SNMP_CheckFault macro.
*
* @section DevelSnmpQ3 Q: Is there any sample application available for testing the functionality of API for communication with the snmp agent?
*
* Ans: Example test files for this purpose can be found in \b test/snmp folder.
*
* @section DevelDregQ1 Q: Is there any sample application available for testing the functionality of API for digit regular expression?
*
* Ans: Example test files for this purpose can be found in \b test/dreg folder.
*
**
* @section DevelSMQ1 Q: How to add a new event to a state machine?
*
* Ans: Follow thes steps to add a new event
* 
* 1) Add an new entry to the enumerator @ref e_MsEvent in the file ms_events.h before @ref e_MsEvent::MS_EVENT_MAX
*
* 2) Add the protypes of the handlers to corresponding file e.g for play add it to file \b 'include/mscml_plays.h/'
*
* 3) Add the implementation of the handlers in the corresponding source file e.g for play add it to file \b 'src/mscml_paly.c/'
*
* 4) Add the handlers to the functional pointers e.g for play add it in f_MscmlOpSm ppf_PlaySm in file \b 'src/mscml_play.c'
*
* 5) Add a MOP_Dummy event handler where the event is not needed to be handled
*
*/

/*! @page Faq Frequently Asked Questions
*
* @section FaqMsPreReqQ1 Q: What are the pre-requisites of media server?
*
* Ans: The media server is dependent on the following libraries:
*
* - \b libsndfile: Library for Reading and Writing Sound Files
*
* - \b libutil: UTIL Library
*
* - \b libamps: AMPS (Asynchronous Middleware for Protocol Servers) Library
*
* - \b libsipstack: SIP Stack Library
*
* - \b libsdpparser: SDP Parsing Library
*
* - \b libdnsresolver: DNS Resolver Library
*
* - \b glib2: Glib Library
*
* - \b libxml2: Library providing XML and HTML support
*
* For development purpose, the following additional libraries may also be required:
*
* - \b libutil-devel: UTIL Development Library
*
* - \b libamps-devel: AMPS (Asynchronous Middleware for Protocol Servers) Development Library
*
* - \b libsipstack-devel: SIP Stack Development Library
*
* - \b libsdpparser-devel: SDP Parsing Development Library
*
* - \b libdnsresolver-devel: DNS Resolver Development Library
*
* Each library needs to be installed separately in order to use media server.
* For more information about how to install these libraries, see the respective documentation of the subject libraries.
*
* @section FaqMsConfigQ1 Q: What are the available configuration parameters for media server?
*
* Ans: For information about the available configuration parameters for media server, see @ref MsConfigOptions.
*
* @section FaqMsConfigQ2 Q: Can media server listen on multiple IP addresses?
*
* Ans: No. Media server can listen on only one IP address. This IP address is usually passed to the media server through a configuration file. If it matches, with one of the available IP addresses on the local system, then it is chosen, otherwise the first availble IP address is picked for use by the media server as its local IP.
*
* @section FaqMsDoc1 Q: What programs are required to generate the documentation of media server?
*
* Ans: The two major programs required to generate the documentation include:
*
* 1) Doxygen version 1.5.6 (http://www.stack.nl/~dimitri/doxygen/)
*
* 2) Dot utility version 2.14.1 (http://www.graphviz.org/)
*
* 3) svn2cl 0.11 (http://ch.tudelft.nl/~arthur/svn2cl/downloads.html)
*
* @section FaqMsDoc2 Q: Which RFC has been used to implement the media server?
*
* Ans: RFC 5022 "Media Server Control Markup Language (MSCML) and Protocol" has been used to implement media server.
*
* @section FaqMsDoc3 Q: What features are supported by the media server?
*
* Ans: The following features are supported by the media server:
*
* - play: For information about supported attributes of play, see @ref mscmlPlay
*
* - playcollect: For information about supported attributes of playcollect, see @ref mscmlPlayCollect
*
* - playrecord: For information about supported attributes of playrecord, see @ref mscmlPlayRecord
*
* - stop: For information about supported attributes of stop, see @ref mscmlStop
*
* - configure_conference: For information about supported attributes of configure_conference, see @ref mscmlConfigureConf
*
* - configure_leg: For information about supported attributes of configure_leg, see @ref mscmlConfigureLeg
*
* - configure_team: For information about supported attributes of configure_team, see @ref mscmlConfigureLeg
*
* @section FaqDregQ1 Q: What is digit regular expression?
*
* Ans: For information about digit regular expression, see the introduction for @subpage MsDreg.
*
*/
